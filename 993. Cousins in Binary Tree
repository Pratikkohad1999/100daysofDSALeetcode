/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isCousins(TreeNode root, int x, int y) {
        // By using queue data structure we can get nodes at the same level
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        queue.add(null);
        int wewillfind = 0; 
        while (!queue.isEmpty())
        {
            TreeNode current = queue.poll();
            if (current == null)
            {
                // moving to next level
                if (!queue.isEmpty()) queue.add(null);
                wewillfind = 0;
                continue;
            }
            
            if (current.left!=null && (current.left.val == x || current.left.val == y)) {
                wewillfind ++;
            }
            else if (current.right!=null && (current.right.val == x || current.right.val == y)) {
                wewillfind ++;
            }
            if (wewillfind == 2) return true;
            
            if (current.left!=null) queue.add(current.left);
            if (current.right!=null) queue.add(current.right);
        }
        
        return false;
    }
}
